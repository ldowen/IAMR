.. _Chap:GettingStarted:

Getting Started
===============
This section walks you through a brief introduction to using IAMR.


Downloading the code
--------------------
IAMR is built on top of the AMReX framework.  In order to run
IAMR, you must download separate git modules for IAMR and AMReX.

First, make sure that git is installed on your machine.

Download the AMReX repository by typing:

.. code:: shell

    > git clone https://github.com/amrex-codes/amrex

This will create a folder called ``amrex/`` on your machine.

..
    alternative to `` `` is :code:` `

Download the IAMR repository by typing: 

.. code:: shell

    > git clone https://github.com/AMReX-Codes/IAMR.git

This will create a folder called ``IAMR/`` on your machine.

You will want to periodically update each of these repositories
by typing ``git pull`` within each repository.




Building the code
-----------------

Here, we walk you through compiling an IAMR executable.

1. ``cd`` to the build directory:

   We build the source code in the ``IAMR/Exec/run2d/`` (for 2D problems) and ``IAMR/Exec/run3d/`` (for 3D) directories.
   Example problems with embedded boundaries are in the ``IAMR/Exec/eb_run2d/`` and ``IAMR/Exec/eb_run3d/`` directories.
   And ``IAMR/Exec/run_2d_particles`` contains an example with passively advected particles.
   A local version of the IAMR executable is built directly in the run folder.
   
2. Edit the ``GNUmakefile``:
   
   Set AMREX_HOME to be the path to the directory where you have put amrex. NOTE: when setting ``AMREX_HOME`` in the ``GNUmakefile``, be aware that ``~`` does not expand, so ``AMREX_HOME=~/amrex/`` will yield an error.

   Alternatively, the path to AMReX can be set up as an environment variable, ``AMREX_HOME``, on your machine to point to the path name where you have put AMReX. For example, if you are using the bash shell, you can add this to your ``.bashrc`` as:

   .. highlight:: bash

   ::

      export AMREX_HOME=/path/to/amrex

   alternatively, in tcsh one can set

   .. highlight:: tcsh
		  
   ::
      
      setenv AMREX_HOME /path/to/amrex


   Other options that you can set in the GNUMakefile include

   +-----------------+------------------------------+------------------+-------------+
   | Option name     | Description                  | Possible values  | Default     |
   |                 |                              |                  | value       |
   +=================+==============================+==================+=============+
   | COMP            | Compiler (gnu or intel)      | gnu / intel      | None        |
   +-----------------+------------------------------+------------------+-------------+
   | USE_MPI         | Whether to enable MPI        | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | USE_OMP         | Whether to enable OpenMP     | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | USE_CUDA        | Whether to enable CUDA       | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | DEBUG           | Whether to use DEBUG mode    | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | PROFILE         | Include profiling info       | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | TINY_PROFILE    | Include tiny profiling info  | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | COMM_PROFILE    | Include comm profiling info  | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+
   | TRACE_PROFILE   | Include trace profiling info | TRUE / FALSE     | FALSE       |
   +-----------------+------------------------------+------------------+-------------+

   .. note::
      **Do not set both USE_OMP and USE_CUDA to true.**

   Information on using other compilers can be found in the AMReX documentation at
   https://amrex-codes.github.io/amrex/docs_html/BuildingAMReX.html .

   
3. Make the executable:

   Now type

   .. code:: shell

      > make

   The name of the resulting executable (generated by the make system) encodes several of the build characteristics, including dimensionality of the problem, compiler name, and whether MPI and/or OpenMP were linked with the executable.
   Thus, several different build configurations may coexist simultaneously in a problem folder.
   For example, the default build in ``IAMR/Exec/run3d`` will look
   like ``amr3d.gnu.MPI.ex``, indicating that this is a 3-d version of the code, made with 
   ``COMP=gnu``, and ``USE_MPI=TRUE``.



Running the code
----------------
IAMR takes an input file as its first command-line argument.  The file may
contain a set of parameter definitions that will overrides defaults set in the code.
For example, to run an example in ``IAMR/Exec/run2d``, type:

.. code:: shell

   > ./amr2d.gnu.ex inputs.2d.bubble


IAMR typically generates subfolders in the current folder that
are named ``plt00000``, ``plt00010``, etc, and ``chk00000``,
``chk00010``, etc. These are called plotfiles and checkpoint
files. The plotfiles are used for visualization of derived fields; the checkpoint
files are used for restarting the code. The output folders contain a set of ASCII and binary files.  The field
data is generally written in a self-describing binary format; the 
ASCII header files provide additional metadata to give AMR context to the field data.

Visualizing the results
-----------------------

..
   pick up here with pulling over content from UsersGuide/GettingStarted/GettingStarted.tex
